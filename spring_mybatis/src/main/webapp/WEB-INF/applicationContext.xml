<?xml version="1.0" encoding="UTF-8"?>
<!--
	Application context definition for PetClinic on JDBC.
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
		xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:task="http://www.springframework.org/schema/task" 
		xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
			http://www.springframework.org/schema/task
			http://www.springframework.org/schema/task/spring-task-3.1.xsd">

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

    <!-- import the dataSource definition -->
   <!--  <import resource="waxberry-config.xml"/> -->
	<!-- Transaction manager for a single JDBC DataSource (alternative to JTA)
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
			p:dataSource-ref="dataSource"/>
 -->
	<!-- Transaction manager that delegates to JTA (for a transactional JNDI DataSource) -->
	<!--
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>
	-->


	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->
	<!--
		Activates various annotations to be detected in bean classes: Spring's
		@Required and @Autowired, as well as JSR 250's @PostConstruct,
		@PreDestroy and @Resource (if available) and JPA's @PersistenceContext
		and @PersistenceUnit (if available).
	-->
	<context:annotation-config/>

	<!--
		Instruct Spring to retrieve and apply @AspectJ aspects which are defined
		as beans in this context (such as the CallMonitoringAspect below).
	-->
	<aop:aspectj-autoproxy/>
	
    
	<!--
		Instruct Spring to perform automatic transaction management on annotated classes.
		The SimpleJdbcClinic implementation declares @Transactional annotations.
		"proxy-target-class" is set because of SimpleJdbcClinic's @ManagedOperation usage.

	<tx:annotation-driven/>
	-->
	<!--
		Exporter that exposes the Clinic DAO and the CallMonitoringAspect via JMX,
		based on the @ManagedResource, @ManagedAttribute, and @ManagedOperation annotations.
	-->
	<context:mbean-export/>

	<!-- PetClinic's central data access object using Spring's SimpleJdbcTemplate 
	<bean id="clinic" class="org.springframework.samples.petclinic.jdbc.SimpleJdbcClinic"/>-->

	<!-- Call monitoring aspect that monitors call count and call invocation time -->
	<!-- <bean id="callMonitor" class="org.springframework.samples.petclinic.aspects.CallMonitoringAspect"/>
 -->
 	<!-- config Timing tasks added by ethan.du -->
 	
	<!-- 支持上传文件 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
 		<property name="maxUploadSize">  
		    <value>10240000</value>  
		</property>  
		<property name="maxInMemorySize">  
		    <value>10240</value>  
		</property>  
		<property name="defaultEncoding">  
		    <value>UTF-8</value>  
		</property>		    
    </bean>
    
    <bean class="com.bsplat.system.common.exception.SysExceptionResolver"  />
    
</beans>